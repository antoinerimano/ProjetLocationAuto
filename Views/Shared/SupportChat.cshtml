﻿@{
    ViewData["Title"] = "Support Chat";
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        margin: 0;
        padding: 0;
        transition: background-color 0.3s ease;
        display: flex;
        min-height: 100vh;
        flex-direction: column;
    }

    .container {
        flex: 1;
        max-width: 1000px;
        margin: auto;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 5px;
        margin-top: 40px;
        display: flex;
        flex-direction: column;
    }

    .text-center {
        margin-bottom: 20px;
        text-align: center;
    }

    #discussion-container {
        flex: 1;
        overflow-y: auto;
        max-height: 60vh; /* Adjusted height to fit within the viewport */
        padding: 10px;
        margin-bottom: 10px;
    }

    #discussion {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

        #discussion li {
            background-color: #007bff;
            color: #fff;
            padding: 10px;
            margin-bottom: 7px;
            border-radius: 5px;
        }

    .old-message {
        animation: fadeIn 0.5s ease;
    }

    .form-group {
        margin-bottom: 20px;
    }

    #message {
        border-radius: 5px 0 0 5px;
        border: 1px solid #ced4da;
        padding: 10px;
    }

    #sendmessage {
        border-radius: 0 5px 5px 0;
        background-color: #28a745;
        color: #fff;
        border: 1px solid #218838;
    }

        #sendmessage:hover {
            background-color: #218838;
        }

    #connectedUsers {
        margin-top: 20px;
        font-weight: bold;
    }

    .message-container {
        display: flex;
        align-items: flex-start;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #007bff;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-right: 10px;
    }

    .new-message {
        animation: fadeIn 0.5s ease;
    }

    footer {
        background-color: #343a40;
        color: #fff;
        padding: 10px;
        text-align: center;
    }
</style>


<div class="container">
    <div class="text-center">
        <h1 class="display-4">Bienvenue dans notre service de Support</h1>
        <p>Si vous avez des questions, vous pouvez communiquer avec nous ici.</p>
        <a class="btn btn-primary" asp-controller="Home" asp-action="ListeModeles">Voir les voitures disponibles</a>
        <p>Utilisateurs en ligne : <span id="connectedUsers">0</span></p>
    </div>

    <div class="form-group">
        <label for="displayname">Nom:</label>
        <input type="text" id="displayname" class="form-control" />
    </div>

    <div class="input-group">
        <input type="text" id="message" class="form-control" placeholder="Entrez votre message..." />
        <div class="input-group-append">
            <button id="sendmessage" class="btn btn-primary">Envoyer</button>
        </div>
        <audio id="notificationSound">
            <source src="/son/notification.mp3" type="audio/mpeg">         
        </audio>
    </div>

    <div id="discussion-container">
        <ul id="discussion" class="list-unstyled"></ul>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/signalr@7.0.2/dist/browser/signalr.min.js"></script>
<script>
    // Définir la connexion SignalR
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

    // Démarrer la connexion
    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    // Gérer l'événement "UserConnected"
    connection.on("UserConnected", function (connectedUsers) {
        // Mettre à jour le nombre d'utilisateurs en ligne
        document.getElementById("connectedUsers").textContent = connectedUsers;
    });

    // Gérer l'événement "LoadPreviousMessages"
    connection.on("LoadPreviousMessages", function (messages) {
        var discussionList = document.getElementById("discussion");

        messages.forEach(function (message) {
            var li = document.createElement("li");
            li.innerHTML = formatMessage(message);
            li.classList.add("old-message");
            discussionList.appendChild(li);
        });
    });

    // Fonction pour formater le message
    function formatMessage(message) {
        // Extraire la date du message existant
        var dateIndex = message.indexOf('[') + 1;
        var dateString = message.substring(dateIndex, message.indexOf(']') - dateIndex);

        // Parser la date et la reformater en utilisant Intl.DateTimeFormat
        var originalDate = new Date(dateString);

        // Convertir la date locale
        var formattedDate = originalDate.toLocaleString('fr-CA', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        });

        return message.replace(dateString, formattedDate);
    }

    // Gérer l'événement "ReceiveMessage"
    connection.on("ReceiveMessage", function (user, message, timestamp, connectedUsers) {
        // Jouer le son de notification lors de la réception d'un message
        var notificationSound = document.getElementById("notificationSound");
        notificationSound.play();

        // Créer l'élément de message
        var date = new Date(timestamp);
        var formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        var isImage = /\.(jpeg|jpg|gif|png)$/.test(message.toLowerCase());
        var content = isImage ? `<img src="${message}" alt="Image" style="max-width:100%; max-height:100%;">` : message;

        var encodedMsg = user + ": " + content + " (" + formattedTime + ")";
        var li = document.createElement("li");

        var avatar = document.createElement("div");
        avatar.classList.add("user-avatar");
        avatar.textContent = user.charAt(0);

        li.appendChild(avatar);
        li.innerHTML += "<span>" + encodedMsg + "</span>";

        li.classList.add("message-container");
        li.classList.add("new-message");

        // Ajouter le message à la discussion
        document.getElementById("discussion").appendChild(li);

        // Mettre à jour le nombre d'utilisateurs en ligne
        document.getElementById("connectedUsers").textContent = connectedUsers;

        // Faire défiler la discussion vers le bas pour afficher le dernier message
        var discussionContainer = document.getElementById("discussion-container");
        discussionContainer.scrollTop = discussionContainer.scrollHeight;
    });

    // Gérer l'événement "click" sur le bouton "Envoyer"
    document.getElementById("sendmessage").addEventListener("click", function (event) {
        // Récupérer le nom de l'utilisateur et le message
        var user = document.getElementById("displayname").value;
        var messageInput = document.getElementById("message");
        var message = messageInput.value.trim();

        // Vérifier si l'utilisateur et le message sont valides
        if (user && message) {
            // Envoyer le message via la connexion SignalR
            connection.invoke("SendMessage", user, message).catch(function (err) {
                return console.error(err.toString());
            });

            // Effacer le champ de saisie du message après l'envoi
            messageInput.value = '';
        }

        // Empêcher le comportement par défaut du bouton
        event.preventDefault();
    });

</script>
